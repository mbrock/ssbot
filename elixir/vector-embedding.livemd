# vector embedding stuff

## Section

```elixir
triage = NodeTown.Affordances.new()
```

```elixir
tests = [
  "search for the best tv",
  "remind me to search for a reminder",
  "hey could you please show an illustration of a moose??",
  "show a photo of a dog",
  "haha hey what's up?",
  "yo check this out"
]

for s <- tests do
  NodeTown.Affordances.guess(triage, s, 3) |> IO.inspect(label: "Emb #{s}")
  NodeTown.Affordances.guess_with_llm!(s) |> IO.inspect(label: "LLM #{s}")
end
```

```elixir
idx = ExFaiss.Index.new(1536, "Flat")

tensors =
  ["remind me", "show a picture", "remember"]
  |> Enum.map(&{&1, GPT3.embedding!(&1) |> Nx.tensor()})
```

```elixir
{_, idx} =
  Enum.reduce(tensors, {0, idx}, fn {_text, tensor}, {i, idx} ->
    {i + 1, ExFaiss.Index.add(idx, tensor)}
  end)
```

```elixir
food = GPT3.embedding!("philosophy")
similar = ExFaiss.Index.search(index, food, 15)

similar.labels
|> Nx.to_flat_list()
|> Enum.map(fn i -> Enum.at(tensors, i) end)
|> Enum.map(fn {text, _} -> text end)
|> Enum.each(&IO.puts/1)
```

```elixir
index = ExFaiss.Index.new(1536, "Flat")
```

```elixir
tensors =
  NodeTown.Graph.get()
  |> RDF.Data.descriptions()
  |> Enum.filter(& &1[NodeTown.NS.ActivityStreams.content()])
  |> Enum.map(fn x ->
    text =
      x[NodeTown.NS.ActivityStreams.content()]
      |> Enum.map(&RDF.Literal.value/1)
      |> List.first()

    tensor =
      text
      |> GPT3.embedding!()
      |> Nx.tensor()

    {text, tensor}
  end)
```

```elixir
index =
  Enum.reduce(tensors, {0, index}, fn {_text, tensor}, {i, idx} ->
    {i + 1, ExFaiss.Index.add(idx, tensor)}
  end)
```

```elixir
{_, index} = index
```

```elixir
food = GPT3.embedding!("philosophy")
similar = ExFaiss.Index.search(index, food, 15)

similar.labels
|> Nx.to_flat_list()
|> Enum.map(fn i -> Enum.at(tensors, i) end)
|> Enum.map(fn {text, _} -> text end)
|> Enum.each(&IO.puts/1)
```

```elixir

```
